plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    /** Rest Docs 플러그인 */
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    /** JaCoCo 플러그인 */
    id 'jacoco'
}

group = 'com.boldpaws'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

ext {
    JWT_VERSION = "0.11.5"
    OPEN_API_VERSION = "2.0.4"
    GSON_VERSION = "2.8.8"
}

dependencies {
    // 스프링 JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // 스프링 시큐리티
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // 스프링 웹
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // 롬복
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // 스프링 벨리데이션
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // H2 데이터베이스
    runtimeOnly 'com.h2database:h2'

    // 스프링 독
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${OPEN_API_VERSION}"

    // JWT
    implementation "io.jsonwebtoken:jjwt-api:${JWT_VERSION}"
    runtimeOnly "io.jsonwebtoken:jjwt-gson:${JWT_VERSION}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${JWT_VERSION}"

    // Gson
    implementation "com.google.code.gson:gson:${GSON_VERSION}"

    // 테스트 관련
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // Rest Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // 타임리프
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // 액츄에이터 및 프로메테우스
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // 어노테이션 프로세서
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // 로그 스태시
    implementation 'net.logstash.logback:logstash-logback-encoder:7.2'

    // 서비스 디스커버리 클라이언트
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    // 데브 툴즈 (라이브 리로딩, 프로퍼티 변경 감지 및 자동 재시작 등 지원)
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.named('test') {
    useJUnitPlatform()
    // REST Doc
    outputs.dir snippetsDir
    // JaCoCo
    finalizedBy jacocoTestReport
}

/**
 * Rest Docs 관련 설정
 * */
ext {
    snippetsDir = file('build/generated-snippets')
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
}

/** API 명세 갱신을 위해 기존 문서를 제거해준다. */
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

/**
 * JaCoCo 관련 설정
 * */
jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'CLASS'
                // 자코코 설정은 추후에 다시 할 것 TODO
//                value = 'COVEREDRATIO'
//                minimum = 0.90
            }
        }
    }
}

task testCoverage {
    group 'verification'
    dependsOn(':test', ':jacocoTestReport', ':jacocoTestCoverageVerification')
    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}