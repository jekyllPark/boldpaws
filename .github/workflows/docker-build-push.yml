name: CI/CD Pipeline

on:
  push:
    branches:
      - master
    paths:
      - 'api-gateway/**'
      - 'discovery/**'
      - 'member-service/**'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine Changed Services
        id: changed_services
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.sha }}^!)
          echo "Changed files: $CHANGED_FILES"
          echo "Commit SHA: ${{ github.sha }}"
          git diff ${{ github.sha }}^! --name-only
          SERVICES=""
          if echo "$CHANGED_FILES" | grep -q 'api-gateway/'; then
            SERVICES="api-gateway,$SERVICES"
          fi
          if echo "$CHANGED_FILES" | grep -q 'discovery/'; then
            SERVICES="discovery,$SERVICES"
          fi
          if echo "$CHANGED_FILES" | grep -q 'member-service/'; then
            SERVICES="member-service,$SERVICES"
          fi
          echo "SERVICES=$SERVICES" >> $GITHUB_ENV

      - name: Build and Push Changed Services
        if: env.SERVICES != ''
        run: |
          IFS=',' read -ra ADDR <<< "$SERVICES"
          for SERVICE in "${ADDR[@]}"; do
            VERSION=$(cat $SERVICE/version.txt)
            NEW_VERSION=$(echo $VERSION + 0.1 | bc)
            echo "Building and pushing $SERVICE:$NEW_VERSION..."
            docker build -t jekyllpark0327/$SERVICE:$NEW_VERSION ./$SERVICE
            docker push jekyllpark0327/$SERVICE:$NEW_VERSION
            echo $NEW_VERSION > $SERVICE/version.txt
          done
      - name: Send success notification
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          SERVICE_LIST=$(echo $SERVICES | sed 's/,/, /g')
          curl -X POST -H 'Content-type: application/json' --data "{'text':'CI/CD Pipeline Completed: Services updated: $SERVICE_LIST'}" $SLACK_WEBHOOK_URL
      - name: Send failure notification
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          SERVICE_LIST=$(echo $SERVICES | sed 's/,/, /g')
          curl -X POST -H 'Content-type: application/json' --data "{'text':'CI/CD Pipeline failed: retry again later'}" $SLACK_WEBHOOK_URL