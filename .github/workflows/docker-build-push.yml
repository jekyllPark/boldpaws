name: CI/CD Pipeline

on:
  push:
    branches:
      - master
#    paths:
#      - 'api-gateway/**'
#      - 'discovery/**'
#      - 'member-service/**'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: make application.yml
        env:
          APPLICATION_MEMBER_SERVICE: ${{ secrets.APPLICATION_MEMBER_SERVICE }}
          APPLICATION_OAUTH: ${{ secrets.APPLICATION_OAUTH }}
        run: |
          echo "${{ APPLICATION_MEMBER_SERVICE }}" > ./member-service/src/main/resources/application.yml
          echo "${{ APPLICATION_OAUTH }}" > ./member-service/src/main/resources/application-oauth.yml
        shell: bash

      - name: Build and Push All Services
        run: |
          SERVICES="api-gateway discovery member-service"
          
          token=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ secrets.DOCKER_USERNAME }}\", \"password\": \"${{ secrets.DOCKER_PASSWORD }}\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          for SERVICE in $SERVICES; do
            LATEST_VERSION=$(curl -s -H "Authorization: JWT $token" "https://registry.hub.docker.com/v2/repositories/jekyllpark0327/$SERVICE/tags/" | jq -r '.results[].name' | grep -v latest | sort -V | tail -n1)
            if [ -z "$LATEST_VERSION" ]; then
            echo "Failed to get the latest version of $SERVICE from Docker Hub."
            continue
            fi
            NEW_VERSION=$(echo "$LATEST_VERSION + 0.1" | bc)
            echo "Building and pushing jekyllpark0327/$SERVICE:$NEW_VERSION..."
            docker build -t jekyllpark0327/$SERVICE:$NEW_VERSION ./$SERVICE
            docker push jekyllpark0327/$SERVICE:$NEW_VERSION
          done
      - name: Send success notification
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          SERVICE_LIST=$(echo $SERVICES | sed 's/,/, /g')
          curl -X POST -H 'Content-type: application/json' --data "{'text':'CI/CD Pipeline Completed: Services updated: $SERVICE_LIST'}" $SLACK_WEBHOOK_URL
      - name: Send failure notification
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          SERVICE_LIST=$(echo $SERVICES | sed 's/,/, /g')
          curl -X POST -H 'Content-type: application/json' --data "{'text':'CI/CD Pipeline failed: retry again later'}" $SLACK_WEBHOOK_URL