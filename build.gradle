plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    /** Rest Docs 플러그인 */
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.dangdang'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

ext {
    JWT_VERSION = "0.11.5"
    OPEN_API_VERSION = "2.0.4"
    GSON_VERSION = "2.8.8"
}

dependencies {
    // 스프링 JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // 스프링 시큐리티
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // 스프링 웹
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // 롬복
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // 스프링 벨리데이션
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // H2 데이터베이스
    runtimeOnly 'com.h2database:h2'

    // 스프링 독
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${OPEN_API_VERSION}"

    // JWT
    implementation "io.jsonwebtoken:jjwt-api:${JWT_VERSION}"
    runtimeOnly "io.jsonwebtoken:jjwt-gson:${JWT_VERSION}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${JWT_VERSION}"

    // Gson
    implementation "com.google.code.gson:gson:${GSON_VERSION}"

    // 테스트 관련
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // Rest Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // 타임리프
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // 액츄에이터 및 프로메테우스
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
}


tasks.named('bootJar') {
    archiveFileName = 'boldPaws.jar'
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

/**
 * Rest Docs 관련 설정
 * */
ext {
    snippetsDir = file('build/generated-snippets')
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
}

/** API 명세 갱신을 위해 기존 문서를 제거해준다. */
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}